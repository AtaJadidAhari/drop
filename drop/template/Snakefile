import os
import re
import drop

configfile: "config.yaml"

parser, config = drop.drop(config)
include: config["wBuildPath"] + "/wBuild.snakefile"

# aberrant expression
subworkflow AE:
    workdir: drop.getMethodPath("AE", "workdir")
    snakefile: drop.getMethodPath("AE", "snakefile")
    configfile: drop.getConfFile()

# aberrant splicing
subworkflow AS:
    workdir: drop.getMethodPath("AS", "workdir")
    snakefile: drop.getMethodPath("AS", "snakefile")
    configfile: drop.getConfFile()

# monoallelic expression
subworkflow MAE:
    workdir: drop.getMethodPath("MAE", "workdir")
    snakefile: drop.getMethodPath("MAE", "snakefile")
    configfile: drop.getConfFile()

rule all:
    input: 
        AE(config["finalFiles"]["AE"]),
        AS(config["finalFiles"]["AS"]),
        MAE(config["finalFiles"]["MAE"]),
        rules.Index.output,
        config["tmpdir"] + "/rulegraphs.done"
    output:
        touch(config["tmpdir"] + "/drop_all.done")

rule getIndexNames:
    input:
        AE(config["finalFiles"]["AE"]),
        AS(config["finalFiles"]["AS"]),
        MAE(config["finalFiles"]["MAE"])
    output:
        indexFile = parser.getProcDataDir() + "/indexNames.txt"
    run: 
        indexList = [x for x in os.listdir(config["htmlOutputPath"]) if re.search("_index.html$",x)]
        with open(output.indexFile, 'w') as file_handler:
    	    for item in indexList:
                file_handler.write(f"{item}\n")

rule aberrantExpression:
    input: AE(config["finalFiles"]["AE"])
    output: drop.getTmpDir() + "/AE.done"

rule aberrantSplicing:
    input: AS(config["finalFiles"]["AS"])
    output: drop.getTmpDir() + "/AS.done"
    
rule mae:
    input: MAE(config["finalFiles"]["MAE"])
    output: drop.getTmpDir() + "/MAE.done"

rule dependencyGraph:
    input:
        MAE(config["htmlOutputPath"] + "/MAE_rulegraph.svg"),
        AS(config["htmlOutputPath"] + "/AS_rulegraph.svg"),
        AE(config["htmlOutputPath"] + "/AE_rulegraph.svg"),
    output:
        touch(config["tmpdir"] + "/rulegraphs.done")

rule publish_local:
    shell: "rsync -Ort {config[htmlOutputPath]} {config[webDir]}"

rule unlock:
    input:
       AE(drop.getMethodPath("AE", "unlock")),
       AS(drop.getMethodPath("AS", "unlock")),
       MAE(drop.getMethodPath("MAE", "unlock"))
    params:
       finalFiles = " ".join(config["finalFiles"].values())
    shell: 
        """
        snakemake --unlock
        rm {input}
        rm -f {params.finalFiles}
        """

