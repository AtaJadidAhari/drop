### SNAKEFILE GENETIC DIAGNOSIS PIPELINE
import os
import re
import drop

parser = drop.config(config)
config = parser.config # needed if you dont provide the wbuild.yaml as configfile
include: os.getcwd() + "/.wBuild/wBuild.snakefile" 

tmpdir, config_files, dummy_files = drop.setupTempFiles(config)
config["tmpdir"] = tmpdir
htmlOutputPath = config["htmlOutputPath"]


# aberrant expression
subworkflow AE:
    workdir: drop.getMethodPath("AE", "workdir")
    snakefile: drop.getMethodPath("AE", "snakefile")
    configfile: config_files["AE"]

# aberrant splicing
subworkflow AS:
    workdir: drop.getMethodPath("AS", "workdir")
    snakefile: drop.getMethodPath("AS", "snakefile")
    configfile: config_files["AS"]

# monoallelic expression
subworkflow MAE:
    workdir: drop.getMethodPath("MAE", "workdir")
    snakefile: drop.getMethodPath("MAE", "snakefile")
    configfile: config_files["MAE"]


rule all:
    input: 
        AE(dummy_files["AE"]),
#       AS(dummy_files["AS"]),
        MAE(dummy_files["MAE"]),
        rules.Index.output
    output:
        touch(tmpdir + "/drop_all.done")

rule aberrant_expression:
    input: AE(dummy_files["AE"])
        
rule aberrant_splicing:
    input: AS(dummy_files["AS"])

rule MAE:
    input: AS(dummy_files["MAE"])


rule getIndexNames:
    input:
        AE(dummy_files["AE"]),
#       AS(dummy_files["AS"]),
        MAE(dummy_files["MAE"])
    output:
        indexFile = parser.getProcDataDir() + "/indexNames.txt"
    run: 
        indexList = [x for x in os.listdir(htmlOutputPath) if re.search("_index.html$",x)]
        with open(output.indexFile, 'w') as file_handler:
    	    for item in indexList:
                file_handler.write(f"{item}\n")


### RULEGRAPH  
### rulegraph only works without print statements. Call <snakemake produce_graphs> for producing output

## For rule rulegraph.. copy configfile in tmp file
import oyaml
with open(tmpdir + '/config.yaml', 'w') as yaml_file:
    oyaml.dump(config, yaml_file, default_flow_style=False)

rulegraph_filename = htmlOutputPath + "/" + os.path.basename(os.getcwd()) + "_rulegraph"
dag_filename = htmlOutputPath + "/" + os.path.basename(os.getcwd()) + "_dag"

rule produce_graphs:
    input:
        expand("{graph}.{fmt}", fmt=["svg", "png"], graph=[rulegraph_filename, dag_filename])

rule create_rulegraph:
    output:
        rulegraph_filename + ".dot"
    shell:
        "snakemake --configfile " + tmpdir + "/config.yaml --rulegraph > {output}"
        
        
rule create_dag:
    output:
        dag_filename + ".dot"
    shell:
        "snakemake --configfile " + tmpdir + "/config.yaml --dag > {output}"


rule render_dot:
    input:
        "{prefix}.dot"
    output:
        "{prefix}.{fmt,(png|svg)}"
    shell:
        "dot -T{wildcards.fmt} < {input} > {output}"
