import os
import re
import drop
import pathlib
import wbuild

configfile: "config.yaml" # default config file

parser = drop.config(config)
config = parser.config
config['wBuildPath'] =  str(pathlib.Path(wbuild.__file__).parent)
include: config['wBuildPath'] + "/wBuild.snakefile"

tmpdir, config_files, dummy_files = drop.setupTempFiles(config)
config["tmpdir"] = tmpdir
htmlOutputPath = config["htmlOutputPath"]


# aberrant expression
subworkflow AE:
    workdir: drop.getMethodPath("AE", "workdir")
    snakefile: drop.getMethodPath("AE", "snakefile")
    configfile: config_files["AE"]

# aberrant splicing
subworkflow AS:
    workdir: drop.getMethodPath("AS", "workdir")
    snakefile: drop.getMethodPath("AS", "snakefile")
    configfile: config_files["AS"]

# monoallelic expression
subworkflow MAE:
    workdir: drop.getMethodPath("MAE", "workdir")
    snakefile: drop.getMethodPath("MAE", "snakefile")
    configfile: config_files["MAE"]


rule all:
    input: 
        AE(dummy_files["AE"]),
#       AS(dummy_files["AS"]),
        MAE(dummy_files["MAE"]),
        rules.Index.output
    output:
        touch(tmpdir + "/drop_all.done")

rule getIndexNames:
    input:
        AE(dummy_files["AE"]),
#       AS(dummy_files["AS"]),
        MAE(dummy_files["MAE"])
    output:
        indexFile = parser.getProcDataDir() + "/indexNames.txt"
    run: 
        indexList = [x for x in os.listdir(htmlOutputPath) if re.search("_index.html$",x)]
        with open(output.indexFile, 'w') as file_handler:
    	    for item in indexList:
                file_handler.write(f"{item}\n")

### Aberrant Expression
rule aberrant_expression:
    input: AE(dummy_files["AE"])

rule aberrant_expression_count:
    input: 
        AE(expand(
            parser.getProcDataDir() + "/aberrant_expression/{annotation}/outrider/{dataset}/total_counts.Rds",
            annotation=list(config["geneAnnotation"].keys()), 
            dataset=parser.outrider_filtered
        )),
        AE(config["htmlOutputPath"] + "/Scripts_Counting_AllDatasets.html")

rule aberrant_expression_outrider:
    input: 
        AE(expand(
            parser.getProcResultsDir() + "/aberrant_expression/{annotation}/outrider/{dataset}/ods.Rds",
            annotation=list(config["geneAnnotation"].keys()),
            dataset=parser.outrider_filtered
        )),
        AE(expand(
            parser.getProcResultsDir() + "/aberrant_expression/{annotation}/outrider/{dataset}/OUTRIDER_results.tsv",
            annotation=list(config["geneAnnotation"].keys()),
            dataset=parser.outrider_filtered
        ))

### Aberrant Splicing
rule aberrant_splicing:
    input: AS(dummy_files["AS"])
    
## Monoallelic Expression
rule MAE:
    input: MAE(dummy_files["MAE"])

rule MAE_count:
    input: 
        MAE(expand(
            parser.getProcDataDir() + "/mae/allelic_counts/{mae_id}.csv.gz",
            mae_id=parser.getMaeAll()
        ))

rule MAE_result:
    input:
        MAE(config["htmlOutputPath"] + "/Scripts_MAE_Results_Overview.html"),
        MAE(expand(
            parser.getProcResultsDir() + "/mae/{dataset}/MAE_results_{annotation}.tsv",
            dataset=parser.mae_ids.keys(), annotation=list(config["geneAnnotation"].keys())
        ))

rule MAE_qc:
    input:
        MAE(config["htmlOutputPath"] + "/Scripts_QC_DNA_RNA_matrix_plot.html"),
        MAE(parser.getProcResultsDir() + "/mae/" + config["mae"]["qcGroup"] + "/dna_rna_qc_matrix.Rds")

## Rule graph: DAG of workflow rules
rule produce_rulegraphs:
    input:
        MAE(htmlOutputPath + "/MAE_rulegraph.svg"),
        AS(htmlOutputPath + "/AS_rulegraph.svg"),
        AE(htmlOutputPath + "/AE_rulegraph.svg"),
    output:
        touch(tmpdir + "/rulegraphs.done")

